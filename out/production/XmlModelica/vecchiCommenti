

//        //scrivero' i file qui
//        Path tradPath = Paths.get("/Users/arl3cchino/IdeaProjects/XmlModelica/traduzioneStruttura");
//
//        try (Stream<Path> walk = Files.walk(Paths.get(dirPath.toString()))) {
//
//            List<String> DESfiles = walk.map(x -> x.toString()).filter(f -> f.endsWith("DES")).collect(Collectors.toList());
//
//
//            DESfiles.forEach(file -> { //ritorna l'intero path: per troncarlo devo prendere l'ultima parte
//
//                //System.out.println(file);
//                String[] fileNameArray = file.split("/");
//                String fileName = fileNameArray[fileNameArray.length - 1];
//                String containerName = fileNameArray[fileNameArray.length - 2];
//                //System.out.println(containerName);
//
//                //PREPARO IL FILE .mo PER LA SCRITTURA
//                //devo:
//                //  prendere il nome del file .DES
//                //  rimuovere l'estensione
//                //  rintracciare nella HashMap quale sia il suo contenitore
//                //  creare il file ".mo" per il contenitore
//
//                //System.out.println(String.format("%s lo scrivo in : %s",ModelicaModuleFormat(fileName), container_Map.get(ModelicaModuleFormat(fileName))));
//
//                //if (destinationPath + )
//                //try {
//                  //  FileWriter fwOFA = new FileWriter(destinationPath +  );
//                //}
//
//
//
//            });
//
//        }


/*
        //PROVA SU SINGOLO FILE
        //Path dirPath = Paths.get("/Users/arl3cchino/Documents/HumMod-hummod-standalone-106f109/Structure/Bone");



        String pathString = dirPath.getFileName().toString(); //prende l'ultimo elemento del path (in questo caso la cartella passata)

        File newFolder = new File(destinationPath + pathString + "/"); // replico la struttura dei file HUMMOD
        newFolder.mkdir(); // creo la cartella

        // è il file singolo per cartella che conterrà tutti i valori "Initial" per i file nella Cartella
        String InitialValues = new String(pathString + "_Initial");
        //System.out.println(InitialValues);




        try {
            FileWriter fwInitial = new FileWriter(destinationPath +  pathString + "/" + InitialValues + ".mo" );
            fwInitial.write(String.format("model %s\n", InitialValues));
            fwInitial.write("\n");
            // ricordo di importare le due librerie per i tipi già definiti
            fwInitial.write("import Physiolibrary;\n");
            fwInitial.write("import Physiomodel;\n");
            fwInitial.write("\n");
            fwInitial.write(String.format("end %s;", InitialValues));


            //fwInitial.close(); la chiusura è temporanea: deve rimanere aperto per tutta la scansione dei file nella cartella


            //devo scorre tutti i file contenuti e differnziare i .DES, .REF e le cartelle

        try (Stream<Path> walk = Files.walk(Paths.get(dirPath.toString()))) {

            List<String> DESfiles = walk.map(x -> x.toString()).filter(f -> f.endsWith("DES")).collect(Collectors.toList());


            DESfiles.forEach(file ->  { //ritorna l'intero path: per troncarlo devo prendere l'ultima parte

                //System.out.println(file);
                String[] fileNameArray = file.split("/");
                String fileName = fileNameArray[fileNameArray.length-1];
                fileName = fileName.replace("DES","mo").replace("-","_");
                //System.out.println(String.format("Il nome del file è: %s",fileName));


                //PARTE LA TRADUZIONE DEL SINGOLO FILE DES -> MO

                try {

                    FileWriter fw = new FileWriter(destinationPath + "/" +pathString + "/" + fileName);

                    //per prima cosa scrivo il nomde del modello
                    fw.write(String.format("model %s\n", fileName));




                    //come ultima cosa scrivo la chiusura del modello
                    fw.write(String.format("\nmodel %s;", fileName));
                    fw.close();

                } catch (Exception e) {
                    e.printStackTrace();
                }




            });


        } catch (IOException e) {
            e.printStackTrace();
        }




        } catch (Exception e) {
            System.out.println(e);
        }


*/

        /*

        //il fileName dev'essere preso in modo automatico dai file ".DES"
        String fileName = new String("Bone_Size.mo");

        //il fileName dei file DES dev''essere preso in automatico
        String fileNameDES = new String("Bone/Bone-Size.DES");


        try {
            FileWriter fw = new FileWriter(destinationPath+fileName);

            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();

            Document document = builder.parse(new File(fileNameDES) );
            document.normalizeDocument();


            NodeList nodeList = document.getElementsByTagName("*");

            // di default una struttura non ha equazioni differenziali: questo rende tutte le variabili "parametri"
            Boolean hasDiffeq = false;

            for (int j =0; j <nodeList.getLength(); j++) {
                Node nodo = nodeList.item(j);
                String name = nodo.getNodeName();
                //System.out.println(name);
                if (name.equals("diffeq")) {    //se ne ha, setto a true la variabile
                    hasDiffeq = true;
                }
            }


            String modelName = null;

            List<String> classInstances = new ArrayList<>();

            // preparo qui 3 liste tra costanti, parametri e variabili, per fare inferenza mentre traduco
            List<String> listaVariabili = new ArrayList<>();
            List<String> listaCostanti = new ArrayList<>();
            List<String> listaParametri = new ArrayList<>();


            for (int i = 0; i<nodeList.getLength(); i++) {
                Node node = nodeList.item(i);


                if (node.getNodeName() == "structure") {
 //                   modelName = handleStructure(fw, node);
                }


                //else if (node.getNodeName() == "var") {
                //   handleVariable(fw,node);
                //}

                else if (node.getNodeName() == "parm") {
 //                    handleParameter(fw,node, nodeList, i, listaParametri);
                }

                else if (node.getNodeName() == "constant") {
 //                   handleConstant(fw, node, nodeList, i, listaCostanti);
                }

                else if (node.getNodeName() == "timevar") {
 //                   handleTimeVar(fw, node, nodeList, i);
                }

                else if (node.getNodeName() == "whitenoise") {
 //                   handleWhiteNoise(fw, node, nodeList, i);

                }

                //qui inizia la gestione dei vari blocchi a seconda del nome

                else if (node.getNodeName() == "block") {
                    Node nameNode = node.getFirstChild();
                    String blockName = nameNode.getTextContent();



                    if (blockName.equals(" Initialize ")) {
 //                       handleInitialEquation(fw, hasDiffeq);
                    }

                    else if (blockName.equals(" Calc ")) {
 //                       handleEquation(fw, hasDiffeq);
                    }
                }


                // qui finisce la parte di gestione dei blocchi


                else if (node.getNodeName() == "equations") {
 //                   handleEquation(fw, hasDiffeq);
                }

                else if (node.getNodeName() == "diffeq") {
 //                   handleDiffeq(fw, node, nodeList, i);
                }

                else if (node.getNodeName() == "def") {
 //                   handleDefinition(fw, node, nodeList, classInstances, i, listaVariabili);
                }













            }


            fw.write("\nend " + modelName + ";");
            fw.close();


            //MAC VERSION
//        Path path = Paths.get("/Users/arl3cchino/Desktop/Bone_Size.mo");

            //WIN VERSION
            Path path = Paths.get("D:\\ProgettoTronci\\XmlModelica\\traduzioni\\Bone_Size.mo");


            List<String> lines = Files.readAllLines(path, StandardCharsets.UTF_8);

            System.out.println(lines.size());

            //all'interno dell'elenco delle classi da importare potrebbero esserci dei doppioni: li elimino
            List<String> newClassInstances = classInstances.stream().distinct().collect(Collectors.toList());

            int position = 5;
            while (!newClassInstances.isEmpty()) {

                //for (int position=6; position<classInstances.size(); position++) {


                //System.out.println("pippo");
                String extraLine = newClassInstances.remove(0);
                lines.add(position, extraLine);
                Files.write(path, lines, StandardCharsets.UTF_8);

            }





        } catch (Exception e) {
            System.out.println(e);
        }

    }*/
    }
}